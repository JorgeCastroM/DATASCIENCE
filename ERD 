{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN0CV+JrPGTJ9CGYfEP5pVz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JorgeCastroM/DATASCIENCE/blob/main/ERD%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "97tf1r4XUCNJ"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Load ENAHO csv file\n",
        "from google.colab import files\n",
        "load=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 856
        },
        "id": "zZipThqXUICE",
        "outputId": "ce6c6c03-cf01-408e-c874-479ebc80e195"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-4e3146b1-23e2-4961-b625-e69d64c0dd4e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-4e3146b1-23e2-4961-b625-e69d64c0dd4e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Cantones.xlsx to Cantones.xlsx\n",
            "Saving Condiciónhabilitante.xlsx to Condiciónhabilitante.xlsx\n",
            "Saving DepartamentoáreaVHyT.xlsx to DepartamentoáreaVHyT.xlsx\n",
            "Saving Distritos.xlsx to Distritos.xlsx\n",
            "Saving EstimaciónpresupuestariaVHyT2030.xlsx to EstimaciónpresupuestariaVHyT2030.xlsx\n",
            "Saving EstimaciónpresupuestariaVHyT2040.xlsx to EstimaciónpresupuestariaVHyT2040.xlsx\n",
            "Saving EstimaciónpresupuestariaVHyT2050.xlsx to EstimaciónpresupuestariaVHyT2050.xlsx\n",
            "Saving IndicadorVHyT.xlsx to IndicadorVHyT.xlsx\n",
            "Saving InstituciónejecutoraVHyT2050.xlsx to InstituciónejecutoraVHyT2050.xlsx\n",
            "Saving InstitucionesPúblicas.xlsx to InstitucionesPúblicas.xlsx\n",
            "Saving IntervencionesPúblicasVHyT.xlsx to IntervencionesPúblicasVHyT.xlsx\n",
            "Saving LineabaseVHyT.xlsx to LineabaseVHyT.xlsx\n",
            "Saving Macroacciones.xlsx to Macroacciones.xlsx\n",
            "Saving MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024.xlsx to MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024.xlsx\n",
            "Saving Meta2030VHyT.xlsx to Meta2030VHyT.xlsx\n",
            "Saving Meta2040VHyT.xlsx to Meta2040VHyT.xlsx\n",
            "Saving Meta2050VHyT.xlsx to Meta2050VHyT.xlsx\n",
            "Saving ObjetivosdeintervenciónVHyT.xlsx to ObjetivosdeintervenciónVHyT.xlsx\n",
            "Saving PolosdeDesarrollo.xlsx to PolosdeDesarrollo.xlsx\n",
            "Saving Provincia.xlsx to Provincia.xlsx\n",
            "Saving Regiones.xlsx to Regiones.xlsx\n",
            "Saving Riesgos.xlsx to Riesgos.xlsx\n",
            "Saving Sectores.xlsx to Sectores.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Potential Entities based on uploaded files:\n",
        "# Cantones\n",
        "# Condiciónhabilitante\n",
        "# DepartamentoáreaVHyT\n",
        "# Distritos\n",
        "# EstimaciónpresupuestariaVHyT2030\n",
        "# EstimaciónpresupuestariaVHyT2040\n",
        "# EstimaciónpresupuestariaVHyT2050\n",
        "# IndicadorVHyT\n",
        "# InstituciónejecutoraVHyT2050\n",
        "# InstitucionesPúblicas\n",
        "# IntervencionesPúblicasVHyT\n",
        "# LineabaseVHyT\n",
        "# Macroacciones\n",
        "# MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024\n",
        "# Meta2030VHyT\n",
        "# Meta2040VHyT\n",
        "# Meta2050VHyT\n",
        "# ObjetivosdeintervenciónVHyT\n",
        "# PolosdeDesarrollo\n",
        "# Provincia\n",
        "# Regiones\n",
        "# Riesgos\n",
        "# Sectores"
      ],
      "metadata": {
        "id": "MVvcgnTvUM23"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Get the list of uploaded files, excluding sample data and .config files\n",
        "uploaded_files = [f for f in os.listdir('/content/') if f.endswith('.xlsx')]\n",
        "\n",
        "print(\"Identifying attributes for all potential entities:\")\n",
        "\n",
        "for file_name in uploaded_files:\n",
        "    try:\n",
        "        df = pd.read_excel(file_name)\n",
        "        print(f\"\\nAttributes of {file_name.replace('.xlsx', '')}:\")\n",
        "        print(df.columns.tolist())\n",
        "    except Exception as e:\n",
        "        print(f\"Could not read {file_name}: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lnuph1ASW3HE",
        "outputId": "36afddb2-04de-4af6-e7ec-33d36e6ff4eb"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Identifying attributes for all potential entities:\n",
            "\n",
            "Attributes of Riesgos:\n",
            "['cod_riesgos', 'nomb_riesgos']\n",
            "\n",
            "Attributes of Condiciónhabilitante:\n",
            "['cod_hab', 'nombre_hab']\n",
            "\n",
            "Attributes of Regiones:\n",
            "['PD', 'POLO DE DESARROLLO', 'CONDICIÓN', 'COND', 'KEY', '# Int', 'Intervención', '2030', '2040', '2050', 'Cat', 'DIMENSION', 'Región/Cantón', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15']\n",
            "\n",
            "Attributes of Provincia:\n",
            "['PD', 'POLO DE DESARROLLO', 'CONDICIÓN', 'COND', 'KEY', '# Int', 'Intervención', '2030', '2040', '2050', 'Cat', 'DIMENSION', 'Región/Cantón', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15']\n",
            "\n",
            "Attributes of ObjetivosdeintervenciónVHyT:\n",
            "['cod_obj_int_pub', 'nombre_obj_int_pub']\n",
            "\n",
            "Attributes of Sectores:\n",
            "['cod_sector', 'nombre_sector']\n",
            "\n",
            "Attributes of Distritos:\n",
            "['cod_dist', 'cod_dist.1', 'nombre_dist', 'cod_canton', 'cod_prov', 'cod_región', 'Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9']\n",
            "\n",
            "Attributes of InstitucionesPúblicas:\n",
            "['Cod_ins_pub', 'nomb_ins_pub']\n",
            "\n",
            "Attributes of Meta2030VHyT:\n",
            "['cod_meta_2030', 'nombre_meta_2030']\n",
            "\n",
            "Attributes of EstimaciónpresupuestariaVHyT2050:\n",
            "['cod_estim_pres_2050', 'Ref_estim_pres_2050']\n",
            "\n",
            "Attributes of MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024:\n",
            "['Plan Estratégico Nacional (PEN) 2030 - 2050', 'Unnamed: 1', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4', 'Unnamed: 5', 'Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10', 'Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15', 'Unnamed: 16', 'Unnamed: 17', 'Unnamed: 18', 'Unnamed: 19', 'Unnamed: 20', 'Unnamed: 21', 'Unnamed: 22', 'Unnamed: 23', 'Unnamed: 24', 'Unnamed: 25']\n",
            "\n",
            "Attributes of DepartamentoáreaVHyT:\n",
            "['cod_dpto', 'nombre_dpto']\n",
            "\n",
            "Attributes of IndicadorVHyT:\n",
            "['cod_ind', 'nombre_ind']\n",
            "\n",
            "Attributes of EstimaciónpresupuestariaVHyT2040:\n",
            "['cod_estim_pres_2040', 'Ref_estim_pres_2040']\n",
            "\n",
            "Attributes of EstimaciónpresupuestariaVHyT2030:\n",
            "['cod_estim_pres_2030', 'Ref_estim_pres_2030']\n",
            "\n",
            "Attributes of PolosdeDesarrollo:\n",
            "['PD', 'POLO DE DESARROLLO', 'CONDICIÓN', 'COND', 'KEY', '# Int', 'Intervención', '2030', '2040', '2050', 'Cat', 'DIMENSION', 'Región/Cantón', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15']\n",
            "\n",
            "Attributes of IntervencionesPúblicasVHyT:\n",
            "['cod_Int_pub', 'Unnamed: 1', 'nombre_Int_pub']\n",
            "\n",
            "Attributes of LineabaseVHyT:\n",
            "['cod_lin_base_2020', 'detalle_lin_base_2020']\n",
            "\n",
            "Attributes of InstituciónejecutoraVHyT2050:\n",
            "['cod_inst_ejec', 'nombre_inst_ejec']\n",
            "\n",
            "Attributes of Cantones:\n",
            "['cod_canton', 'nombre_canton', 'cod_prov', 'cod_región']\n",
            "\n",
            "Attributes of Macroacciones:\n",
            "['nomb_macroacciones', 'cod_macroacciones']\n",
            "\n",
            "Attributes of Meta2050VHyT:\n",
            "['cod_meta_2050', 'nombre_meta_2050']\n",
            "\n",
            "Attributes of Meta2040VHyT:\n",
            "['cod_meta_2040', 'nombre_meta_2040']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "uploaded_files = [f for f in os.listdir('/content/') if f.endswith('.xlsx')]\n",
        "\n",
        "print(\"Identifying potential primary keys for each entity:\")\n",
        "\n",
        "for file_name in uploaded_files:\n",
        "    try:\n",
        "        df = pd.read_excel(file_name)\n",
        "        print(f\"\\nPotential primary keys for {file_name.replace('.xlsx', '')}:\")\n",
        "        potential_keys = []\n",
        "        for col in df.columns:\n",
        "            # Check if the column has unique values (potential primary key)\n",
        "            if df[col].is_unique:\n",
        "                potential_keys.append(col)\n",
        "        if potential_keys:\n",
        "            print(potential_keys)\n",
        "        else:\n",
        "            print(\"No single column found with unique values.\")\n",
        "    except Exception as e:\n",
        "        print(f\"Could not read {file_name}: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ODkblMt1XJIe",
        "outputId": "5b83f345-e85c-4513-c070-6509c65aece0"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Identifying potential primary keys for each entity:\n",
            "\n",
            "Potential primary keys for Riesgos:\n",
            "['cod_riesgos', 'nomb_riesgos']\n",
            "\n",
            "Potential primary keys for Condiciónhabilitante:\n",
            "['cod_hab', 'nombre_hab']\n",
            "\n",
            "Potential primary keys for Regiones:\n",
            "['# Int']\n",
            "\n",
            "Potential primary keys for Provincia:\n",
            "['# Int']\n",
            "\n",
            "Potential primary keys for ObjetivosdeintervenciónVHyT:\n",
            "['cod_obj_int_pub', 'nombre_obj_int_pub']\n",
            "\n",
            "Potential primary keys for Sectores:\n",
            "['cod_sector', 'nombre_sector']\n",
            "\n",
            "Potential primary keys for Distritos:\n",
            "['cod_dist']\n",
            "\n",
            "Potential primary keys for InstitucionesPúblicas:\n",
            "['Cod_ins_pub', 'nomb_ins_pub']\n",
            "\n",
            "Potential primary keys for Meta2030VHyT:\n",
            "['cod_meta_2030', 'nombre_meta_2030']\n",
            "\n",
            "Potential primary keys for EstimaciónpresupuestariaVHyT2050:\n",
            "['cod_estim_pres_2050']\n",
            "\n",
            "Potential primary keys for MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024:\n",
            "['Unnamed: 11', 'Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14']\n",
            "\n",
            "Potential primary keys for DepartamentoáreaVHyT:\n",
            "['cod_dpto']\n",
            "\n",
            "Potential primary keys for IndicadorVHyT:\n",
            "['cod_ind', 'nombre_ind']\n",
            "\n",
            "Potential primary keys for EstimaciónpresupuestariaVHyT2040:\n",
            "['cod_estim_pres_2040']\n",
            "\n",
            "Potential primary keys for EstimaciónpresupuestariaVHyT2030:\n",
            "['cod_estim_pres_2030']\n",
            "\n",
            "Potential primary keys for PolosdeDesarrollo:\n",
            "['# Int']\n",
            "\n",
            "Potential primary keys for IntervencionesPúblicasVHyT:\n",
            "['nombre_Int_pub']\n",
            "\n",
            "Potential primary keys for LineabaseVHyT:\n",
            "['cod_lin_base_2020']\n",
            "\n",
            "Potential primary keys for InstituciónejecutoraVHyT2050:\n",
            "['cod_inst_ejec']\n",
            "\n",
            "Potential primary keys for Cantones:\n",
            "['nombre_canton']\n",
            "\n",
            "Potential primary keys for Macroacciones:\n",
            "['nomb_macroacciones', 'cod_macroacciones']\n",
            "\n",
            "Potential primary keys for Meta2050VHyT:\n",
            "['cod_meta_2050']\n",
            "\n",
            "Potential primary keys for Meta2040VHyT:\n",
            "['cod_meta_2040']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "uploaded_files = [f for f in os.listdir('/content/') if f.endswith('.xlsx')]\n",
        "\n",
        "print(\"Identifying a primary key for each entity (first unique column found):\")\n",
        "\n",
        "for file_name in uploaded_files:\n",
        "    try:\n",
        "        df = pd.read_excel(file_name)\n",
        "        print(f\"\\nPrimary key for {file_name.replace('.xlsx', '')}:\")\n",
        "        primary_key = None\n",
        "        for col in df.columns:\n",
        "            # Check if the column has unique values\n",
        "            if df[col].is_unique:\n",
        "                primary_key = col\n",
        "                break # Stop after finding the first unique column\n",
        "        if primary_key:\n",
        "            print(primary_key)\n",
        "        else:\n",
        "            print(\"No single column found with unique values.\")\n",
        "    except Exception as e:\n",
        "        print(f\"Could not read {file_name}: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U8UhMMtFXnFg",
        "outputId": "7929224b-7add-4cdd-9f51-7d8764d1911e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Identifying a primary key for each entity (first unique column found):\n",
            "\n",
            "Primary key for Riesgos:\n",
            "cod_riesgos\n",
            "\n",
            "Primary key for Condiciónhabilitante:\n",
            "cod_hab\n",
            "\n",
            "Primary key for Regiones:\n",
            "# Int\n",
            "\n",
            "Primary key for Provincia:\n",
            "# Int\n",
            "\n",
            "Primary key for ObjetivosdeintervenciónVHyT:\n",
            "cod_obj_int_pub\n",
            "\n",
            "Primary key for Sectores:\n",
            "cod_sector\n",
            "\n",
            "Primary key for Distritos:\n",
            "cod_dist\n",
            "\n",
            "Primary key for InstitucionesPúblicas:\n",
            "Cod_ins_pub\n",
            "\n",
            "Primary key for Meta2030VHyT:\n",
            "cod_meta_2030\n",
            "\n",
            "Primary key for EstimaciónpresupuestariaVHyT2050:\n",
            "cod_estim_pres_2050\n",
            "\n",
            "Primary key for MATRIZPEN, SectorVivienda,HábitatyTerritorio,12-2024:\n",
            "Unnamed: 11\n",
            "\n",
            "Primary key for DepartamentoáreaVHyT:\n",
            "cod_dpto\n",
            "\n",
            "Primary key for IndicadorVHyT:\n",
            "cod_ind\n",
            "\n",
            "Primary key for EstimaciónpresupuestariaVHyT2040:\n",
            "cod_estim_pres_2040\n",
            "\n",
            "Primary key for EstimaciónpresupuestariaVHyT2030:\n",
            "cod_estim_pres_2030\n",
            "\n",
            "Primary key for PolosdeDesarrollo:\n",
            "# Int\n",
            "\n",
            "Primary key for IntervencionesPúblicasVHyT:\n",
            "nombre_Int_pub\n",
            "\n",
            "Primary key for LineabaseVHyT:\n",
            "cod_lin_base_2020\n",
            "\n",
            "Primary key for InstituciónejecutoraVHyT2050:\n",
            "cod_inst_ejec\n",
            "\n",
            "Primary key for Cantones:\n",
            "nombre_canton\n",
            "\n",
            "Primary key for Macroacciones:\n",
            "nomb_macroacciones\n",
            "\n",
            "Primary key for Meta2050VHyT:\n",
            "cod_meta_2050\n",
            "\n",
            "Primary key for Meta2040VHyT:\n",
            "cod_meta_2040\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4z_qOkuRZDRG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1949d6e1"
      },
      "source": [
        "To define many-to-one relationships with `IntervencionesPúblicasVHyT`, we look for columns in other entities that correspond to a unique identifier (like the primary key) in `IntervencionesPúblicasVHyT`. The code in the cell above (`U8UhMMtFXnFg`) attempts to identify these relationships by finding common columns between `IntervencionesPúblicasVHyT` and other files, and checking if those common columns are potential primary keys in `IntervencionesPúblicasVHyT`.\n",
        "\n",
        "Running that cell will show you the potential many-to-one relationships it found."
      ]
    }
  ]
}